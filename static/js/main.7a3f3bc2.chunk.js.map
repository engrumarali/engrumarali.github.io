{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","onClick","document","getElementById","innerHTML","precorWorkout","getWorkoutLimits","getState","setSpeed","setResistance","setIncline","setRamp","cancelPreWorkoutPhase","finishPreWorkoutPhase","finishWorkoutPhase","finishPostWorkoutPhase","setHidePrecorSummaryAfterWorkout","setBarMessage","setFeaturedWorkout","JSON","stringify","name","provider","category","setQuickstartWorkout","requestSignIn","disableMenus","setDisableMachineControls","getMetrics","getSummaryMetrics","getFitnessEquipmentInfo","id","cols","rows","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","console","log","state","controller","postMessage","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","setDefaultURL"],"mappings":"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","file":"static/js/main.7a3f3bc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* eslint-disable no-undef */\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>workout</h1>\n      <button onClick={() => { document.getElementById(\"output\").innerHTML = precorWorkout.getWorkoutLimits() }}>getWorkoutLimits</button>\n      <button onClick={() => { document.getElementById(\"output\").innerHTML = precorWorkout.getState() }}        >getState</button>\n      <br/>\n      <button onClick={() => { precorWorkout.setSpeed(2) }}                                                  >setSpeed</button>\n      <button onClick={() => { precorWorkout.setResistance(2) }}                                                >setResistance</button>\n      <button onClick={() => { precorWorkout.setIncline(2)   }}                                                >setIncline</button>\n      <button onClick={() => { precorWorkout.setRamp(2)      }}                                                >setRamp</button>\n      <br/>\n      <button onClick={() => { precorWorkout.cancelPreWorkoutPhase()}}                                         >cancelPreWorkoutPhase</button>\n      <button onClick={() => { precorWorkout.finishPreWorkoutPhase()}}                                         >finishPreWorkoutPhase</button>\n      <button onClick={() => { precorWorkout.finishWorkoutPhase()}}                                            >finishWorkoutPhase</button>\n      <button onClick={() => { precorWorkout.finishPostWorkoutPhase()}}                                        >finishPostWorkoutPhase</button>\n      <button onClick={() => { precorWorkout.setHidePrecorSummaryAfterWorkout(true)}}                          >setHidePrecorSummaryAfterWorkout(true)</button>\n      <button onClick={() => { precorWorkout.setHidePrecorSummaryAfterWorkout(false)}}                         >setHidePrecorSummaryAfterWorkout(false)</button>\n      <button onClick={() => { precorWorkout.setBarMessage(\"THIS IS BAR MESSAGE 2\", 1)}}                               >setBarMessage</button>\n      <button onClick={() => { precorWorkout.setFeaturedWorkout(JSON.stringify({name: \"My Custom Workout\", provider: \"provider\", category: \"category\"}))}}>setFeaturedWorkout</button>\n      <button onClick={() => { precorWorkout.setFeaturedWorkout(\"\")}}>setFeaturedWorkout(\"\")</button>\n      <button onClick={() => { precorWorkout.setQuickstartWorkout(JSON.stringify({name: \"My Custom Workout\", provider: \"provider\", category: \"category\"}))}}>setQuickstartWorkout</button>\n      <button onClick={() => { precorWorkout.requestSignIn()}}                                                 >requestSignIn</button>\n      <button onClick={() => { precorWorkout.disableMenus();  document.getElementById(\"output\").innerHTML = \"disableMenus\"}}>disableMenus</button>\n      <button onClick={() => { precorWorkout.setDisableMachineControls(true)}}                                 >setDisableMachineControls(true)</button>\n      <button onClick={() => { precorWorkout.setDisableMachineControls(false)}}                                >setDisableMachineControls(false)</button>\n\n      <button onClick={() => { document.getElementById(\"output\").innerHTML = precorWorkout.getMetrics()}}      >getMetrics</button>\n      <button onClick={() => { document.getElementById(\"output\").innerHTML = precorWorkout.getSummaryMetrics()}}>getSummaryMetrics</button>\n      <button onClick={() => { document.getElementById(\"output\").innerHTML = precorWorkout.getFitnessEquipmentInfo()}}>getFitnessEquipmentInfo</button>\n      <br/>\n      <textarea id='output' cols='60' rows='6'></textarea>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          console.log(\"installing Worker state: \" + installingWorker.state);\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              console.log(\"posting skip waiting message\");\n              installingWorker.postMessage({ 'type' : 'SKIP_WAITING'});\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register({\n  onSuccess: function() {\n    console.log(\"---site is ready for offline\");\n    // eslint-disable-next-line no-undef\n    precorWorkout.setDefaultURL();\n  }\n});\n"],"sourceRoot":""}